--------------------PROYECTO--------------------
-----------LENGUAJE DE BASES DE DATOS-----------

CREATE USER PROYECTO IDENTIFIED BY 123;
GRANT CONNECT, RESOURCE TO PROYECTO;



SET SERVEROUTPUT ON;


CREATE TABLE Address (
    id_address NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    street VARCHAR2(255),
    province VARCHAR2(50),
    canton VARCHAR2(50),
    others_signs VARCHAR2(255)
);




CREATE TABLE Characteristics_Property (
    id_characteristics_property NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    number_rooms NUMBER,
    number_bathrooms NUMBER,
    description VARCHAR2(255),
    garage NUMBER(1, 0),
    pool NUMBER(1, 0)
);



CREATE TABLE Comodity (
    id_comodity  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    description VARCHAR2(255)
);



CREATE TABLE Users (
    id_user NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    password VARCHAR2(255) NOT NULL,
    birth_date DATE,
    first_sur_name VARCHAR2(50),
    second_sur_name VARCHAR2(50),
    name VARCHAR2(50),
    identification VARCHAR2(20) UNIQUE,
    email VARCHAR2(100) UNIQUE,
    phone VARCHAR2(15),
    image VARCHAR2(1024)
);


CREATE TABLE Rol (
    id_rol  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    id_user NUMBER,
    FOREIGN KEY (id_user) REFERENCES Users(id_user)
);


CREATE TABLE Agent (
    id_agent  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    salary DECIMAL(10, 2),
    experience NUMBER,
    id_user NUMBER,
    hire_date DATE,
    FOREIGN KEY (id_user) REFERENCES Users(id_user)
);


CREATE TABLE Property (
    id_property  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50),
    id_characteristics NUMBER,
    id_agent NUMBER,
    id_address NUMBER,
    price DECIMAL(10, 2),
    transaction_type VARCHAR2(50),
    antiquity NUMBER,
    owner VARCHAR2(100),
    FOREIGN KEY (id_characteristics) REFERENCES Characteristics_Property(id_characteristics),
    FOREIGN KEY (id_agent) REFERENCES Agent(ID_Agent),
    FOREIGN KEY (id_address) REFERENCES Address(ID_Address)
);


CREATE TABLE Favorite_Property (
    id_favorite_property  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_property NUMBER,
    id_user NUMBER,
    FOREIGN KEY (id_property) REFERENCES Property(id_property),
    FOREIGN KEY (id_user) REFERENCES Users(id_user)
);



CREATE TABLE Comodity_property (
    id_comodity_property NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_property NUMBER,
    id_comodity NUMBER,
    FOREIGN KEY (id_property) REFERENCES Property(id_property),
    FOREIGN KEY (id_comodity) REFERENCES Comodity(id_comodity)
);


CREATE TABLE Transactions (
    id_transaction NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_property NUMBER,
    id_agent NUMBER,
    transaction_date DATE DEFAULT SYSDATE,
    id_user NUMBER,
    FOREIGN KEY (id_property) REFERENCES Property(id_property),
    FOREIGN KEY (id_agent) REFERENCES Agent(id_agent),
    FOREIGN KEY (id_user) REFERENCES Users(id_user)
);



CREATE TABLE Image_Property (
    id_image_property  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_property NUMBER,
    image VARCHAR2(1024),
    FOREIGN KEY (id_property) REFERENCES Property(id_property)
);


INSERT INTO Address (street, province, canton, others_signs)
VALUES ('Calle Principal 123', 'San José', 'Escazú', 'Cerca del parque');


INSERT INTO Agent (salary, experience, id_user, hire_date)
VALUES (50000.00, 5, 1,TO_DATE('2020-03-12', 'YYYY-MM-DD'));


INSERT INTO Characteristics_Property (number_rooms, numbers_bathrooms, description, garage, pool)
VALUES (3, 2, 'Hermosa casa con amplio jardín', 1, 0);


INSERT INTO Property (name, id_characteristics, id_agent, id_address, price, transaction_type, antiquity, owner)
VALUES ('Casa de Ensueño', 1, 1, 1, 250000.00, 'Venta', 10, 'Juan Pérez');

INSERT INTO Users (password, birth_date, first_sur_name, second_sur_name, name, identification, email, phone, image)
VALUES ('contrasena123', TO_DATE('1990-01-15', 'YYYY-MM-DD'), 'Pérez', 'Gómez', 'Juan', '123456789', 'juan@example.com', '123-456-7890', 'imagen.jpg');

INSERT INTO Image_Property (id_property, image)
VALUES
(2, 'https://canalhogar.com/wp-content/uploads/2023/10/25-planos-y-Disenos-de-Casas-de-2-Pisos-Modernas.jpg');


COMMIT;



-- Procedimientos de usuarios
CREATE OR REPLACE PROCEDURE AgregarUsuario(
    p_password VARCHAR2,
    p_birth_date DATE,
    p_first_sur_name VARCHAR2,
    p_second_sur_name VARCHAR2,
    p_name VARCHAR2,
    p_identification VARCHAR2,
    p_email VARCHAR2,
    p_phone VARCHAR2,
    p_image VARCHAR2
)
IS
BEGIN
    INSERT INTO Users (
        password,
        birth_date,
        first_sur_name,
        second_sur_name,
        name,
        identification,
        email,
        phone,
        image
    ) VALUES (
        p_password,
        p_birth_date,
        p_first_sur_name,
        p_second_sur_name,
        p_name,
        p_identification,
        p_email,
        p_phone,
        p_image
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Nuevo usuario agregado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al agregar el usuario: ' || SQLERRM);
END AgregarUsuario;

CREATE OR REPLACE PROCEDURE AddUser (
    p_password VARCHAR2,
    p_birth_date DATE,
    p_first_sur_name VARCHAR2,
    p_second_sur_name VARCHAR2,
    p_name VARCHAR2,
    p_identification VARCHAR2,
    p_email VARCHAR2,
    p_phone VARCHAR2,
    p_image VARCHAR2
)
IS
BEGIN
    INSERT INTO Users (
        password,
        birth_date,
        first_sur_name,
        second_sur_name,
        name,
        identification,
        email,
        phone,
        image
    ) VALUES (
        p_password,
        p_birth_date,
        p_first_sur_name,
        p_second_sur_name,
        p_name,
        p_identification,
        p_email,
        p_phone,
        p_image
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Nuevo usuario agregado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al agregar el usuario: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE UpdateUser (
    p_id_user IN NUMBER,
    p_password IN VARCHAR2 DEFAULT NULL,
    p_birth_date IN DATE DEFAULT NULL,
    p_first_sur_name IN VARCHAR2 DEFAULT NULL,
    p_second_sur_name IN VARCHAR2 DEFAULT NULL,
    p_name IN VARCHAR2 DEFAULT NULL,
    p_identification IN VARCHAR2 DEFAULT NULL,
    p_email IN VARCHAR2 DEFAULT NULL,
    p_phone IN VARCHAR2 DEFAULT NULL,
    p_image IN VARCHAR2 DEFAULT NULL
) AS
BEGIN
    UPDATE Users
    SET password = NVL(p_password, password),
        birth_date = NVL(p_birth_date, birth_date),
        first_sur_name = NVL(p_first_sur_name, first_sur_name),
        second_sur_name = NVL(p_second_sur_name, second_sur_name),
        name = NVL(p_name, name),
        identification = NVL(p_identification, identification),
        email = NVL(p_email, email),
        phone = NVL(p_phone, phone),
        image = NVL(p_image, image)
    WHERE id_user = p_id_user;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;


BEGIN
    UpdateUser(
        p_id_user => 1,
        p_name => 'Pedro'
    );
END;


-- ********************************************************************************************


-- Procedimientos de agentes

CREATE OR REPLACE PROCEDURE UpdateAgent (
    p_id_agent NUMBER,
    p_salary DECIMAL,
    p_experience NUMBER
)
IS
BEGIN
  
    UPDATE Agent
    SET salary = p_salary,
        experience = p_experience
    WHERE id_agent = p_id_agent;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Datos del agente actualizados correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al actualizar los datos del agente: ' || SQLERRM);
END;
    

CREATE OR REPLACE PROCEDURE UpdateAgent (
    p_id_agent NUMBER,
    p_salary DECIMAL DEFAULT NULL,
    p_experience NUMBER DEFAULT NULL,
    p_id_user NUMBER DEFAULT NULL,
    p_hire_date DATE DEFAULT NULL
)
IS
BEGIN
    UPDATE Agent
    SET salary = NVL(p_salary, salary),
        experience = NVL(p_experience, experience),
        id_user = NVL(p_id_user, id_user),
        hire_date = NVL(p_hire_date, hire_date)
    WHERE id_agent = p_id_agent;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Datos del agente actualizados correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al actualizar los datos del agente: ' || SQLERRM);
END;




-- ***************************************************************************************



-- Procedimientos de roles
CREATE OR REPLACE PROCEDURE UpdateRol (
    p_id_rol NUMBER,
    p_name VARCHAR2 DEFAULT NULL,
    p_id_user NUMBER DEFAULT NULL
)
IS
BEGIN
    UPDATE Rol
    SET name = NVL(p_name, name),
        id_user = NVL(p_id_user, id_user)
    WHERE id_rol = p_id_rol;

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Datos del rol actualizados correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al actualizar los datos del rol: ' || SQLERRM);
END;



CREATE OR REPLACE PROCEDURE InsertRol (
    p_name VARCHAR2,
    p_id_user NUMBER
)
IS
BEGIN
    INSERT INTO Rol (name, id_user)
    VALUES (p_name, p_id_user);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Rol insertado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error al insertar el rol: ' || SQLERRM);
END;

-- ***************************************************************************





CREATE OR REPLACE PROCEDURE SearchProperty(
    p_transaction_type VARCHAR2 DEFAULT NULL,
    p_min_price DECIMAL DEFAULT NULL,
    p_max_price DECIMAL DEFAULT NULL,
    p_characteristic VARCHAR2 DEFAULT NULL
)
IS
BEGIN
    
    FOR propiedades_cursor IN (
        SELECT p.name, p.price, p.transaction_type, p.antiquity, p.owner
        FROM Property p
        JOIN Characteristics_Property cp ON p.id_characteristics = cp.id_characteristics_property
        WHERE (p_transaction_type IS NULL OR p.transaction_type = p_transaction_type)
        AND (p_min_price IS NULL OR p.price >= p_min_price)
        AND (p_max_price IS NULL OR p.price <= p_max_price)
        AND (p_characteristic IS NULL OR cp.description LIKE '%' || p_characteristic || '%')
    ) LOOP
        
        DBMS_OUTPUT.PUT_LINE('Nombre: ' || propiedades_cursor.name || ', Precio: ' || propiedades_cursor.price || ', Tipo de Transacción: ' || propiedades_cursor.transaction_type || ', Antigüedad: ' || propiedades_cursor.antiquity || ', Propietario: ' || propiedades_cursor.owner);
    END LOOP;
END;
    

BEGIN
    SearchProperty(
        p_transaction_type => NULL,
        p_min_price => 250000,
        p_characteristic => 'Hermosa casa con amplio jardín' 
    );
END;




-- Funciones

CREATE OR REPLACE FUNCTION UsersAge(
    p_user_id NUMBER

) RETURN NUMBER
IS
    v_user_age NUMBER := 0;
BEGIN
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, BIRTH_DATE) / 12) INTO v_user_age FROM USERS WHERE id_user = p_user_id;
    RETURN v_user_age;
END;


-- ******************************************************
    


-- Vistas
CREATE OR REPLACE VIEW Property_Details AS
SELECT p.id_property,
       p.name AS property_name,
       cp.number_rooms,
       cp.number_bathrooms,
       cp.description AS property_description,
       cp.garage,
       cp.pool,
       a.street,
       a.province,
       a.canton,
       a.others_signs
FROM Property p
JOIN Characteristics_Property cp ON p.id_characteristics = cp.id_characteristics_property
JOIN Address a ON p.id_address = a.id_address;
-- ******************************************************************

-- Indices

CREATE INDEX idx_address_province ON Address(province);
CREATE INDEX idx_address_canton ON Address(canton);


CREATE INDEX idx_users_identification ON Users(identification);
CREATE INDEX idx_users_email ON Users(email);

CREATE INDEX idx_property_name ON PROPERTY(NAME);
CREATE INDEX idx_rol_name ON ROL(NAME);

-- *******************************************************************


